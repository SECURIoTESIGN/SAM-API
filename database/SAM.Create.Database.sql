-- MySQL Script generated by MySQL Workbench
-- Mon Nov 23 14:45:44 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema SAM
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `SAM` ;

-- -----------------------------------------------------
-- Schema SAM
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SAM` DEFAULT CHARACTER SET utf8 ;
USE `SAM` ;

-- -----------------------------------------------------
-- Table `SAM`.`Type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Type` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(45) NOT NULL,
  `description` TEXT NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Module`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Module` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `typeID` INT NULL,
  `shortname` VARCHAR(45) NOT NULL,
  `fullname` VARCHAR(100) NOT NULL,
  `displayName` VARCHAR(45) NOT NULL,
  `logicFileName` VARCHAR(45) NULL DEFAULT NULL,
  `description` TEXT NULL,
  `avatar` VARCHAR(45) NULL DEFAULT NULL,
  `createdOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  INDEX `fk_Module_Type1_idx` (`typeID` ASC) VISIBLE,
  CONSTRAINT `fk_Module_Type1`
    FOREIGN KEY (`typeID`)
    REFERENCES `SAM`.`Type` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Question`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Question` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `content` VARCHAR(255) NOT NULL,
  `description` TEXT NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Module_Question`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Module_Question` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `moduleID` INT NOT NULL,
  `questionID` INT NOT NULL,
  `questionOrder` INT NOT NULL COMMENT 'If the current question should be show in first, second, â€¦ place. ',
  PRIMARY KEY (`ID`),
  INDEX `fk_Module_has_Question_Question1_idx` (`questionID` ASC) VISIBLE,
  INDEX `fk_Module_has_Question_Module_idx` (`moduleID` ASC) VISIBLE,
  CONSTRAINT `fk_Module_has_Question_Module`
    FOREIGN KEY (`moduleID`)
    REFERENCES `SAM`.`Module` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Module_has_Question_Question1`
    FOREIGN KEY (`questionID`)
    REFERENCES `SAM`.`Question` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Answer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Answer` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `content` VARCHAR(100) NOT NULL,
  `description` TEXT NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Question_Answer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Question_Answer` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `questionID` INT NOT NULL,
  `answerID` INT NOT NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `fk_Answer_has_Question_Question1_idx` (`questionID` ASC) VISIBLE,
  INDEX `fk_Answer_has_Question_Answer1_idx` (`answerID` ASC) VISIBLE,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `questionID_answerID_Unique` (`answerID` ASC, `questionID` ASC) VISIBLE,
  CONSTRAINT `fk_Answer_has_Question_Answer1`
    FOREIGN KEY (`answerID`)
    REFERENCES `SAM`.`Answer` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Answer_has_Question_Question1`
    FOREIGN KEY (`questionID`)
    REFERENCES `SAM`.`Question` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Recommendation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Recommendation` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `content` VARCHAR(100) NOT NULL,
  `description` TEXT NULL,
  `guideFileName` VARCHAR(45) NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`User` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NOT NULL,
  `firstName` VARCHAR(30) NOT NULL,
  `lastName` VARCHAR(30) NOT NULL,
  `psw` VARCHAR(255) NOT NULL,
  `avatar` VARCHAR(45) NULL,
  `userStatus` TINYINT NOT NULL DEFAULT 0 COMMENT 'Flag to define if the user is active or not.',
  `administrator` TINYINT NULL DEFAULT 0,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Group` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `designation` VARCHAR(45) NOT NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`User_Group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`User_Group` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `groupID` INT NOT NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `fk_User_has_Group_Group1_idx` (`groupID` ASC) VISIBLE,
  INDEX `fk_User_has_Group_User1_idx` (`userID` ASC) VISIBLE,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `userID_GroupID_Unique` (`userID` ASC, `groupID` ASC) VISIBLE,
  CONSTRAINT `fk_User_has_Group_User1`
    FOREIGN KEY (`userID`)
    REFERENCES `SAM`.`User` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_User_has_Group_Group1`
    FOREIGN KEY (`groupID`)
    REFERENCES `SAM`.`Group` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Module_Group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Module_Group` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `moduleID` INT NOT NULL,
  `groupID` INT NOT NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  INDEX `fk_Module_has_Group_Group1_idx` (`groupID` ASC) VISIBLE,
  INDEX `fk_Module_has_Group_Module1_idx` (`moduleID` ASC) VISIBLE,
  UNIQUE INDEX `moduleID_groupID_unique` (`moduleID` ASC, `groupID` ASC) VISIBLE,
  CONSTRAINT `fk_Module_has_Group_Module1`
    FOREIGN KEY (`moduleID`)
    REFERENCES `SAM`.`Module` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Module_has_Group_Group1`
    FOREIGN KEY (`groupID`)
    REFERENCES `SAM`.`Group` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Session`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Session` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `moduleID` INT NOT NULL,
  `ended` TINYINT NULL DEFAULT 0,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  INDEX `fk_Session_Module1_idx` (`moduleID` ASC) VISIBLE,
  INDEX `fk_Session_User1_idx` (`userID` ASC) VISIBLE,
  CONSTRAINT `fk_Session_Module1`
    FOREIGN KEY (`moduleID`)
    REFERENCES `SAM`.`Module` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Session_User1`
    FOREIGN KEY (`userID`)
    REFERENCES `SAM`.`User` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Session_User_Answer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Session_User_Answer` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `sessionID` INT NOT NULL,
  `questionAnswerID` INT NULL COMMENT 'This FK is only set if the answer is static (i.e. not provided by the user).',
  `questionID` INT NULL COMMENT 'This FK is only set if the answer is dynamic (i.e. provided by the user in field input).',
  `input` VARCHAR(45) NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  INDEX `fk_Answer_has_Session_Session1_idx` (`sessionID` ASC) VISIBLE,
  INDEX `fk_Session_User_Answer_Question_Answer1_idx` (`questionAnswerID` ASC) VISIBLE,
  UNIQUE INDEX `sessionID_questionAnswerID` (`sessionID` ASC, `questionAnswerID` ASC) VISIBLE,
  INDEX `fk_Session_User_Answer_Question1_idx` (`questionID` ASC) VISIBLE,
  CONSTRAINT `fk_Answer_has_Session_Session1`
    FOREIGN KEY (`sessionID`)
    REFERENCES `SAM`.`Session` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Session_User_Answer_Question_Answer1`
    FOREIGN KEY (`questionAnswerID`)
    REFERENCES `SAM`.`Question_Answer` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Session_User_Answer_Question1`
    FOREIGN KEY (`questionID`)
    REFERENCES `SAM`.`Question` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Auth_Token_Blacklist`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Auth_Token_Blacklist` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `userID` INT NOT NULL,
  `token` VARCHAR(255) NOT NULL COMMENT 'Avoid doubles',
  `createdOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `fk_Auth_Token_Blacklist_User1_idx` (`userID` ASC) VISIBLE,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `token_UNIQUE` (`token` ASC) VISIBLE,
  CONSTRAINT `fk_Auth_Token_Blacklist_User1`
    FOREIGN KEY (`userID`)
    REFERENCES `SAM`.`User` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Dependency`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Dependency` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `moduleID` INT NOT NULL,
  `dependsOn` INT NOT NULL,
  `createdOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  INDEX `fk_Dependency_Module1_idx` (`moduleID` ASC) VISIBLE,
  INDEX `fk_Dependency_Module2_idx` (`dependsOn` ASC) VISIBLE,
  UNIQUE INDEX `moduleID_dependsOn_UNIQUE` (`moduleID` ASC, `dependsOn` ASC) VISIBLE,
  CONSTRAINT `fk_Dependency_Module1`
    FOREIGN KEY (`moduleID`)
    REFERENCES `SAM`.`Module` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Dependency_Module2`
    FOREIGN KEY (`dependsOn`)
    REFERENCES `SAM`.`Module` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Question_has_Child`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Question_has_Child` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `parent` INT NOT NULL,
  `child` INT NOT NULL,
  `ontrigger` INT NOT NULL COMMENT 'The answer (ID) that triggers this sub-question (child) to be ask.',
  `questionOrder` INT NOT NULL,
  `createdOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `fk_Question_has_Question_Question2_idx` (`child` ASC) VISIBLE,
  INDEX `fk_Question_has_Question_Question1_idx` (`parent` ASC) VISIBLE,
  PRIMARY KEY (`ID`),
  INDEX `fk_Question_has_Parent_Answer1_idx` (`ontrigger` ASC) VISIBLE,
  CONSTRAINT `fk_Question_has_Question_Question1`
    FOREIGN KEY (`parent`)
    REFERENCES `SAM`.`Question` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Question_has_Question_Question2`
    FOREIGN KEY (`child`)
    REFERENCES `SAM`.`Question` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Question_has_Parent_Answer1`
    FOREIGN KEY (`ontrigger`)
    REFERENCES `SAM`.`Answer` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Recommendation_Question_Answer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Recommendation_Question_Answer` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `recommendationID` INT NOT NULL,
  `questionAnswerID` INT NOT NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`),
  INDEX `fk_Question_Answer_has_Recomendation_Recomendation1_idx` (`recommendationID` ASC) VISIBLE,
  INDEX `fk_Question_Answer_has_Recomendation_Question_Answer1_idx` (`questionAnswerID` ASC) VISIBLE,
  UNIQUE INDEX `recommendationID_questionAnswerID_UNIQUE` (`recommendationID` ASC, `questionAnswerID` ASC) VISIBLE,
  CONSTRAINT `fk_Question_Answer_has_Recomendation_Question_Answer1`
    FOREIGN KEY (`questionAnswerID`)
    REFERENCES `SAM`.`Question_Answer` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Question_Answer_has_Recomendation_Recomendation1`
    FOREIGN KEY (`recommendationID`)
    REFERENCES `SAM`.`Recommendation` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SAM`.`Session_Recommendation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SAM`.`Session_Recommendation` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `sessionID` INT NOT NULL,
  `recommendationID` INT NOT NULL,
  `createdOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `updatedOn` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX `fk_Session_has_Recomendation_Recomendation1_idx` (`recommendationID` ASC) VISIBLE,
  INDEX `fk_Session_has_Recomendation_Session1_idx` (`sessionID` ASC) VISIBLE,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `u_sessionID_recommendationID` (`sessionID` ASC, `recommendationID` ASC) VISIBLE,
  CONSTRAINT `fk_Session_has_Recomendation_Session1`
    FOREIGN KEY (`sessionID`)
    REFERENCES `SAM`.`Session` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Session_has_Recomendation_Recomendation1`
    FOREIGN KEY (`recommendationID`)
    REFERENCES `SAM`.`Recommendation` (`ID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
